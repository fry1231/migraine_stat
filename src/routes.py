import random
import io

import aiogram.utils.exceptions

from src.fsm_forms import *
import src.keyboards as kb
from src.bot import dp, bot
from src.utils import notify_me, write_xlsx
from src.messages_handler import postpone_new_user_notif
from src.settings import MY_TG_ID
from db.models import NewUser, PainCase, DrugUse
import traceback
import asyncio
import logging


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    """
    Check if user exists. If not: greet and create new user.
    Save notification about new user to the message queue
    """
    user_id = message.from_user.id
    user = await crud.get_user(telegram_id=user_id)
    if not user:
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name
        user_name = message.from_user.username
        locale = message.from_user.locale
        # Add user to the DB
        user = await crud.create_user(
            telegram_id=user_id,
            first_name=first_name,
            user_name=user_name,
            language=locale.language
        )
        # Send the notification to the message broker
        await postpone_new_user_notif(
            NewUser(
                first_name=user.first_name,
                last_name=last_name,
                user_name=user.user_name
            )
        )
    text = \
        """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:
üîò /reschedule - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –æ–ø—Ä–æ—Å–æ–≤
üîò /pain - —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å –±–æ-–±–æ
üîò /druguse - —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å –ø—Ä–∏—ë–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
üîò /check_pains - –≤—ã–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ–ª–µ–π
üîò /check_drugs - –≤—ã–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤
üîò /add_drug - –¥–æ–±–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ"""
    await message.reply(text)


@dp.message_handler(commands=['reschedule'])
async def reschedule(message: types.Message):
    """
    Change notify_every attr in User instance
    If no User instance - create one
    """
    user_id = message.from_user.id
    user = await crud.get_user(telegram_id=user_id)
    notification_period = user.notify_every
    period_text = str(notification_period)
    temp = {
        '1': ' –¥–µ–Ω—å',
        '2': ' –¥–Ω—è',
        '3': ' –¥–Ω—è',
        '7': ' –¥–Ω–µ–π',
        '31': ' –¥–µ–Ω—å'
    }
    if notification_period == -1:
        text_notif_period = "–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
    else:
        period_text += temp[period_text]
        text_notif_period = f"–¢–µ–∫—É—â–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è - 1 —Ä–∞–∑ –≤ {period_text}"
    text = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –æ–ø—Ä–æ—Å–∞ (—Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è 1 —Ä–∞–∑ –≤ ...)\n" + text_notif_period
    await message.reply(text, reply_markup=kb.get_days_choose_kb('schedule'))


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('schedule'))
async def reschedule_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    n_days = int(callback_query.data.split('_')[-1])
    await crud.reschedule(telegram_id=user_id, notify_every=n_days)
    if n_days == -1:
        await bot.send_message(user_id, f'–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ')
    else:
        period_text = str(n_days)
        temp = {
            '1': ' –¥–µ–Ω—å',
            '2': ' –¥–Ω—è',
            '3': ' –¥–Ω—è',
            '7': ' –¥–Ω–µ–π',
            '31': ' –¥–µ–Ω—å'
        }
        await bot.send_message(user_id, f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ —Ä–∞–∑ –≤ {n_days}{temp[period_text]}')


@dp.message_handler(commands=['check_drugs'])
async def get_drugs_statistics(message: types.Message):
    """
    Get druguse statistics
    """
    text = f"–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥: "
    await message.reply(text, reply_markup=kb.get_days_choose_kb('druguse', include_month=True))


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('druguse'))
async def get_drugs_statistics_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    pre_message = await bot.send_message(user_id, '–°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ...')
    try:
        n_days = int(callback_query.data.split('_')[-1])
        user_druguses: list[DrugUse] = await crud.get_user_druguses(user_id=user_id, period_days=n_days)
        drugs_statistics = []

        # Filling data
        for event in user_druguses:
            temp_dict = {}
            temp_dict['–õ–µ–∫–∞—Ä—Å—Ç–≤–æ'] = event.drugname
            temp_dict['–î–∞—Ç–∞'] = event.date.strftime('%d.%m.%Y')
            temp_dict['–ö–æ–ª-–≤–æ'] = event.amount
            drugs_statistics.append(temp_dict)

        # Period text definition
        period_text = ''
        if n_days != -1:
            period_text = str(n_days)
            temp = {
                '1': ' –¥–µ–Ω—å',
                '2': ' –¥–Ω—è',
                '3': ' –¥–Ω—è',
                '7': ' –¥–Ω–µ–π',
                '31': ' –¥–µ–Ω—å'
            }
            period_text += temp[period_text]

        if len(drugs_statistics) == 0:
            await bot.send_message(user_id, f"–í —Ç–µ—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ ({period_text}) –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç")
        elif len(drugs_statistics) > 0:
            # Send an image of a table
            # try:
            #     fig, ax = render_mpl_table(drugs_statistics)
            #     with io.BytesIO() as buf:
            #         fig.savefig(buf, format='png')
            #         buf.seek(0)
            #         await bot.send_document(user_id, types.InputFile(buf, 'drugs_statistics.png'))
            # except IndexError:
            #     await notify_me(f'User {user_id}. IndexError while get_drugs_statistics_callback'
            #                     f'\nTable size is {len(drugs_statistics)}')

            # Send Excel table
            with io.BytesIO() as buf:
                write_xlsx(buf, drugs_statistics)
                await bot.send_document(user_id, types.InputFile(buf, 'drugs_statistics.xlsx'))
    except asyncio.TimeoutError:
        await bot.send_message(user_id, "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç")
    except Exception:
        await notify_me(f'User {user_id}. Error while get_drugs_statistics_callback'
                        f'\n\n{traceback.format_exc()}')
    finally:
        await bot.delete_message(user_id, pre_message.message_id)


@dp.message_handler(commands=['check_pains'])
async def get_pain_statistics(message: types.Message):
    """
    Get paincase statistics
    """
    text = f"–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥: "
    await message.reply(text, reply_markup=kb.get_days_choose_kb('paincase', include_month=True))


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('paincase'))
async def get_pain_statistics_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    pre_message = await bot.send_message(user_id, '–°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ...')
    try:
        n_days = int(callback_query.data.split('_')[-1])
        user_paincases: list[PainCase] = await crud.get_user_pains(user_id=user_id, period_days=n_days)
        pains_statistics = []
        # Filling data
        for event in user_paincases:
            temp_dict = {}
            temp_dict['–î–∞—Ç–∞'] = event.date.strftime('%d.%m.%Y')
            temp_dict['–ß–∞—Å–æ–≤'] = event.durability
            temp_dict['–°–∏–ª–∞'] = event.intensity
            temp_dict['–ê—É—Ä–∞'] = event.aura
            temp_dict['–¢—Ä–∏–≥–≥–µ—Ä—ã'] = event.provocateurs
            temp_dict['–°–∏–º–ø—Ç–æ–º—ã'] = event.symptoms
            if len(event.medecine_taken) == 0:
                temp_dict['–õ–µ–∫–∞—Ä—Å—Ç–≤–æ'] = None
                temp_dict['–ö–æ–ª-–≤–æ'] = None
                temp_dict['–ü—Ä–∏–º–µ—á–∞–Ω–∏—è'] = event.description
                pains_statistics.append(temp_dict)
            else:
                sub_event: DrugUse
                for i, sub_event in enumerate(event.medecine_taken):
                    # if only one druguse - fill the fields in the same row
                    if i == 0:
                        temp_dict['–õ–µ–∫–∞—Ä—Å—Ç–≤–æ'] = sub_event.drugname
                        temp_dict['–ö–æ–ª-–≤–æ'] = sub_event.amount
                        temp_dict['–ü—Ä–∏–º–µ—á–∞–Ω–∏—è'] = event.description
                        pains_statistics.append(temp_dict)
                    # if >1: second row would be empty, except for the druguse info
                    else:
                        temp_dict = {k: None for k in ['–î–∞—Ç–∞', '–ß–∞—Å–æ–≤', '–°–∏–ª–∞', '–ê—É—Ä–∞', '–¢—Ä–∏–≥–≥–µ—Ä—ã', '–°–∏–º–ø—Ç–æ–º—ã']}
                        temp_dict['–õ–µ–∫–∞—Ä—Å—Ç–≤–æ'] = sub_event.drugname
                        temp_dict['–ö–æ–ª-–≤–æ'] = sub_event.amount
                        temp_dict['–ü—Ä–∏–º–µ—á–∞–Ω–∏—è'] = None
                        pains_statistics.append(temp_dict)

        # Period text definition
        period_text = ''
        if n_days != -1:
            period_text = str(n_days)
            temp = {
                '1': ' –¥–µ–Ω—å',
                '2': ' –¥–Ω—è',
                '3': ' –¥–Ω—è',
                '7': ' –¥–Ω–µ–π',
                '31': ' –¥–µ–Ω—å'
            }
            period_text += temp[period_text]
        if len(pains_statistics) == 0:
            await bot.send_message(user_id, f"–í —Ç–µ—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ ({period_text}) –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç")
        elif len(pains_statistics) > 0:
            # # Send image of a table
            # try:
            #     fig, ax = render_mpl_table(pains_statistics[["–î–∞—Ç–∞", "–ß–∞—Å–æ–≤", "–°–∏–ª–∞", "–ê—É—Ä–∞", "–õ–µ–∫–∞—Ä—Å—Ç–≤–æ", "–ö–æ–ª-–≤–æ"]])
            #     with io.BytesIO() as buf:
            #         fig.savefig(buf, format='png')
            #         buf.seek(0)
            #         await bot.send_document(user_id, types.InputFile(buf, 'pains_statistics.png'))
            # except IndexError:
            #     await notify_me(f'User {user_id}. IndexError while get_pain_statistics_callback'
            #                     f'\nTable size is {len(pains_statistics)}')

            # Send table as xlsx
            with io.BytesIO() as buf:
                write_xlsx(buf, pains_statistics)
                await bot.send_document(user_id, types.InputFile(buf, 'pains_statistics.xlsx'))
    except asyncio.TimeoutError:
        await bot.send_message(user_id, "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç")
    except Exception:
        await notify_me(f'User {user_id}. Error while get_pain_statistics_callback'
                        f'\n\n{traceback.format_exc()}')
    finally:
        await bot.delete_message(user_id, pre_message.message_id)


@dp.message_handler(commands=['download_db'])
async def get_db(message: types.Message):
    user_id = message.from_user.id
    if user_id == MY_TG_ID:
        db = types.InputFile('db/db_file/sql_app.db')
        await bot.send_document(message.from_user.id, db)


async def regular_report(user_id: int, missing_days: int):
    """
    Notify about all new users, added during the previous day
    Ask each user if there was pain during the days
    If so - start report_paincase_form
    """
    hi_s = ["–°–∞–ª–∞–º –∞–ª–µ–π–∫—É–º", "Hi", "Hello", "Ahlan wa sahlan", "Marhaba", "Hola", "–ü—Ä—ã–≤–∏—Ç–∞–Ω–Ω–µ", "–ó–¥—Ä–∞–≤–µ–π—Ç–µ", "Jo napot",
            "Chao", "Aloha", "Hallo", "Geia sou", "–ì–∞–º–∞—Ä–¥–∂–æ–±–∞", "Shalom", "Selamat", "Godan daginn", "Buenas dias",
            "Buon giorno", "Ave", "Lab dien", "Sveiki", "Sveikas", "Guten Tag", "Goddag", "Dzien dobry", "Ola", "Buna",
            "–ó–¥—Ä–∞–≤–æ", "Dobry den", "Sawatdi", "Merhaba", "–ü—Ä–∏–≤—ñ—Ç", "Paivaa", "Bonjour", "Namaste", "Zdravo",
            "Dobry den", "God dag", "Saluton", "Tervist", "Konnichi wa"]
    temp = {
        '1': '–¥–µ–Ω—å',
        '2': '–¥–Ω—è',
        '3': '–¥–Ω—è',
        '7': '–¥–Ω–µ–π',
        '31': '–¥–µ–Ω—å'
    }
    if str(missing_days) in temp:
        suffix = temp[str(missing_days)]
    else:
        suffix = '–¥–Ω–µ–π'
    if missing_days == 1:
        text = f"{random.choice(hi_s)}! –ë–æ–ª–µ–ª–∞ –ª–∏ —Å–µ–≥–æ–¥–Ω—è –≥–æ–ª–æ–≤–∞?"
    else:
        text = f"{random.choice(hi_s)}! –ë–æ–ª–µ–ª–∞ –ª–∏ –≥–æ–ª–æ–≤–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {missing_days} {suffix}?"
    await bot.send_message(
        user_id,
        text,
        reply_markup=kb.yes_no_missing
    )


@dp.message_handler(commands=['execute'])
async def execute_raw(message: types.Message):
    user_id = message.from_user.id
    if user_id == MY_TG_ID:
        text = message.text.replace('/execute', '').strip()
        results = await crud.execute_raw(text)
        output = ''
        for record in results:
            if not isinstance(record, str):
                record = ", ".join([f'{k}: {v}' for k, v in record.items()])
            output += record
            output += '\n'
        await notify_me(output)


@dp.message_handler()
async def handle_other(message: types.Message):
    """
    Handle messages depending on its context
    """
    if message.text == '–î–∞ :(':
        await add_paincase_entry(message)
    elif message.text == '–ù–µ—Ç, –≤—Å—ë —Ö–æ—Ä–æ—à–æ! / –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ':
        nice_words = ["–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ", "–í–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ", "–ß—É–¥–µ—Å–Ω–æ", "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ", "–ö—Ä—É—Ç–æ", "–ó–¥–æ—Ä–æ–≤–æ", "–î–∏–≤–Ω–æ", "–ß–æ—Ç–∫–æ",
                      "–ë–ª–∞–≥–æ–¥–∞—Ç—å", "–ü–æ—Ç—Ä—è—Å–∞—é—â–µ", "–ò–∑—É–º–∏—Ç–µ–ª—å–Ω–æ", "–†–æ—Å–∫–æ—à–Ω–æ", "–û—Ç–º–µ–Ω–Ω–æ", "–ë–µ—Å–ø–æ–¥–æ–±–Ω–æ", "–®–∏–∫–∞—Ä–Ω–æ",
                      "–†–∞—Å–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ", "–ü—Ä–µ–ª–µ—Å—Ç–Ω–æ", "–õ—é–±–æ-–¥–æ—Ä–æ–≥–æ", "–ü–æ—Ö–≤–∞–ª—å–Ω–æ", "–û–±–≤–æ—Ä–æ–∂–∏—Ç–µ–ª—å–Ω–æ", "–ë–∞–ª–¥—ë–∂", "–ö–∞–π—Ñ",
                      "–ù–µ–ø–ª–æ—Ö–æ", "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ"]
        await message.reply(f'{random.choice(nice_words)}!', reply_markup=types.ReplyKeyboardRemove())

    # If I want to reply to someone
    elif message.from_user.id == MY_TG_ID:
        if message.reply_to_message is not None:
            message_with_credentials: types.Message = message.reply_to_message
            splitted = message_with_credentials.text.split('\n')
            user_id_row = [el for el in splitted if el.startswith('user_id=')][-1]
            user_id = int(user_id_row.replace('user_id=', ''))

            message_id_row = [el for el in splitted if el.startswith('message_id=')][-1]
            reply_message_id = int(message_id_row.replace('message_id=', ''))

            text_to_reply = message.text

            await bot.send_message(chat_id=user_id,
                                   text=text_to_reply,
                                   reply_to_message_id=reply_message_id)
            await notify_me('Message sent')
    else:
        try:
            await message.forward(MY_TG_ID)
            text = f'User {message.from_user.username} / {message.from_user.first_name} ' \
                   f'user_id={message.from_user.id}\n' \
                   f'message_id={message.message_id}'
            await bot.send_message(chat_id=MY_TG_ID,
                                   text=text,
                                   reply_to_message_id=message.message_id)
        except (aiogram.utils.exceptions.TelegramAPIError, aiogram.utils.exceptions.BadRequest):
            await notify_me(f'User {message.from_user.username} / {message.from_user.first_name} '
                            f'writes:\n{message.text}\n\n'
                            f'user_id={message.from_user.id}\n'
                            f'message_id={message.message_id}')

