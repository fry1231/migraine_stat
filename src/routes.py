from aiogram import Bot, Dispatcher, types
from db import crud, models
from db.models import User, DrugUse, PainCase, Drug
from db.database import SessionLocal, engine
import src.keyboards as kb


models.Base.metadata.create_all(bind=engine)

API_TOKEN = '5494735949:AAF9NFfm2skBPjB_Z7LN8WmHUQsV8ofciXQ'

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
session = SessionLocal


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    """
    This handler will be called when user sends `/start` or `/help` command
    """
    user_id = message.from_user.id
    user = crud.get_user(telegram_id=user_id)
    if not user:
        crud.create_user(telegram_id=user_id, notify_every=-1)

    text = """
    –ü—Ä–∏–≤–µ—Ç! –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥:\n
    üîò /reschedule - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è –æ–ø—Ä–æ—Å–æ–≤
    üîò /pain - —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å –±–æ-–±–æ
    üîò /druguse - —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
    üîò /missing_pain - —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å –±–æ-–±–æ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏
    üîò /missing_druguse - —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏
    üîò /check_drugs - —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤
    üîò /check_pains - —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ–ª–µ–π
    üîò /add_drug - –¥–æ–±–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ
    """
    await message.reply(text)


@dp.message_handler(commands=['reschedule'])
async def reschedule(message: types.Message):
    """
    Change notify_every attr in User instance
    If no User instance - create one
    """
    user_id = message.from_user.id
    user = crud.get_user(telegram_id=user_id)
    notification_period = user.notify_every
    if notification_period == -1:
        text_notif_period = "–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –ø–æ–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω."
    else:
        text_notif_period = f"–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ - {notification_period} –¥–Ω–µ–π."
    text = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –æ–ø—Ä–æ—Å–∞ (—Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è 1 —Ä–∞–∑ –≤ ...)\n" + text_notif_period
    await message.reply(text, reply_markup=kb.schedule)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('schedule'))
async def reschedule_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    n_days = callback_query.data[-1]
    if n_days.isdigit():
        n_days = int(n_days)
    crud.reschedule(telegram_id=user_id, notify_every=n_days)
    await bot.send_message(user_id, f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ —Ä–∞–∑ –≤ {n_days} –¥–Ω–µ–π')


@dp.message_handler(commands=['pain'])
async def report_paincase(message: types.Message):
    """
    Make a commit with PainCase
    """
    user_id = message.from_user.id
    user = crud.get_user(telegram_id=user_id)
    notification_period = user.notify_every
    text = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –æ–ø—Ä–æ—Å–∞ (—Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è 1 —Ä–∞–∑ –≤ ...)\n" \
           f"–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ - {notification_period} –¥–Ω–µ–π."
    await message.reply(text, reply_markup=kb.schedule)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('schedule'))
async def report_paincase_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    n_days = callback_query.data[-1]
    if n_days.isdigit():
        n_days = int(n_days)
    crud.reschedule(telegram_id=user_id, notify_every=n_days)
    await bot.send_message(user_id, f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ —Ä–∞–∑ –≤ {n_days} –¥–Ω–µ–π')


@dp.message_handler()
async def echo(message: types.Message):
    # old style:
    # await bot.send_message(message.chat.id, message.text)

    await message.answer(message.text)
