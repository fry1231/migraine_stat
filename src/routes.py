import pandas as pd
import random
from aiogram import types

from tabulate import tabulate
from src.fsm_forms import *
import src.keyboards as kb
from src.bot import dp, bot
from src.utils import notify_me


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    """
    This handler will be called when user sends `/start` or `/help` command
    """
    user_id = message.from_user.id
    user = crud.get_user(telegram_id=user_id)
    if not user:
        crud.create_user(telegram_id=user_id, notify_every=-1)
        await notify_me(f'--notification\n'
                        f'Created user\n'
                        f'user_id {user_id}\n'
                        f'first_name {message.from_user.first_name}\n'
                        f'user_name {message.from_user.username}')
    text = """
    –ü—Ä–∏–≤–µ—Ç! –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥:\n
    üîò /reschedule - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –æ–ø—Ä–æ—Å–æ–≤
    üîò /pain - —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å –±–æ-–±–æ
    üîò /druguse - —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
    üîò /check_drugs - —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤
    üîò /check_pains - —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ–ª–µ–π
    üîò /add_drug - –¥–æ–±–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ
    """
    await message.reply(text)


@dp.message_handler(commands=['reschedule'])
async def reschedule(message: types.Message):
    """
    Change notify_every attr in User instance
    If no User instance - create one
    """
    user_id = message.from_user.id
    user = crud.get_user(telegram_id=user_id)
    notification_period = user.notify_every
    if notification_period == -1:
        text_notif_period = "–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –ø–æ–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω."
    else:
        text_notif_period = f"–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ - {notification_period} –¥–Ω–µ–π."
    text = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –æ–ø—Ä–æ—Å–∞ (—Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è 1 —Ä–∞–∑ –≤ ...)\n" + text_notif_period
    await message.reply(text, reply_markup=kb.get_days_choose_kb('schedule'))


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('schedule'))
async def reschedule_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    n_days = int(callback_query.data.split('_')[-1])
    crud.reschedule(telegram_id=user_id, notify_every=n_days)
    await bot.send_message(user_id, f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ —Ä–∞–∑ –≤ {n_days} –¥–Ω–µ–π')


@dp.message_handler(commands=['check_drugs'])
async def get_drugs_statistics(message: types.Message):
    """
    Get druguse statistics
    """
    text = f"–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥: "
    await message.reply(text, reply_markup=kb.get_days_choose_kb('druguse', include_month=True))


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('druguse'))
async def get_drugs_statistics_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    n_days = int(callback_query.data.split('_')[-1])
    user_druguses = crud.get_user_druguses(user_id=user_id, period_days=n_days)
    drugs_statistics = {
        '–õ–µ–∫–∞—Ä—Å—Ç–≤–æ': [],
        '–î–∞—Ç–∞': [],
        '–ö–æ–ª-–≤–æ': []
    }
    for event in user_druguses:
        drugs_statistics['–õ–µ–∫–∞—Ä—Å—Ç–≤–æ'].append(event.drugname)
        drugs_statistics['–î–∞—Ç–∞'].append(event.datetime.strftime('%d.%m.%Y'))
        drugs_statistics['–ö–æ–ª-–≤–æ'].append(event.amount)
    drugs_statistics = pd.DataFrame(drugs_statistics)
    text = tabulate(drugs_statistics, headers='keys', tablefmt="github")
    await bot.send_message(
        user_id,
        f'<pre>{text}</pre>',
        reply_markup=types.ReplyKeyboardRemove(),
        parse_mode=ParseMode.HTML,
    )


@dp.message_handler(commands=['check_pains'])
async def get_drugs_statistics(message: types.Message):
    """
    Get paincase statistics
    """
    text = f"–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥: "
    await message.reply(text, reply_markup=kb.get_days_choose_kb('paincase', include_month=True))


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('paincase'))
async def get_drugs_statistics_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    n_days = int(callback_query.data.split('_')[-1])
    user_paincases = crud.get_user_pains(user_id=user_id, period_days=n_days)
    pains_statistics = {
        '–î–∞—Ç–∞': [],
        '–ß–∞—Å–æ–≤': [],
        '–°–∏–ª–∞': [],
        '–ê—É—Ä–∞': [],
        '–õ–µ–∫–∞—Ä—Å—Ç–≤–æ': [],
        '–ö–æ–ª-–≤–æ': []
    }
    for event in user_paincases:
        pains_statistics['–î–∞—Ç–∞'].append(event.datetime.strftime('%d.%m.%Y'))
        pains_statistics['–ß–∞—Å–æ–≤'].append(event.durability)
        pains_statistics['–°–∏–ª–∞'].append(event.intensity)
        pains_statistics['–ê—É—Ä–∞'].append(event.aura)
        if len(event.children) == 1:
            pains_statistics['–õ–µ–∫–∞—Ä—Å—Ç–≤–æ'].append(event.children[0].drugname)
            pains_statistics['–ö–æ–ª-–≤–æ'].append(event.children[0].amount)
        else:
            pains_statistics['–õ–µ–∫–∞—Ä—Å—Ç–≤–æ'].append(None)
            pains_statistics['–ö–æ–ª-–≤–æ'].append(None)
    pains_statistics = pd.DataFrame(pains_statistics)
    text = tabulate(pains_statistics, headers='keys', tablefmt="github")
    await bot.send_message(
        user_id,
        f'<pre>{text}</pre>',
        reply_markup=types.ReplyKeyboardRemove(),
        parse_mode=ParseMode.HTML,
    )


@dp.message_handler(commands=['download_db'])
async def get_db(message: types.Message):
    db = types.InputFile('./db/sql_app.db')
    await bot.send_document(message.from_user.id, db)


async def regular_report(user_id: int, missing_days: int):
    """
    Ask if there was pain during the days
    """
    hi_s = ["–°–∞–ª–∞–º –∞–ª–µ–π–∫—É–º", "Hi", "Hello", "Ahlan wa sahlan", "Marhaba", "Hola", "–ü—Ä—ã–≤–∏—Ç–∞–Ω–Ω–µ", "–ó–¥—Ä–∞–≤–µ–π—Ç–µ", "Jo napot", "Chao", "Aloha", "Hallo", "Geia sou", "–ì–∞–º–∞—Ä–¥–∂–æ–±–∞", "Shalom", "Selamat", "Godan daginn", "Buenas dias", "Buon giorno", "Ave", "Lab dien", "Sveiki", "Sveikas", "Guten Tag", "Goddag", "Dzien dobry", "Ola", "Buna", "–ó–¥—Ä–∞–≤–æ", "Dobry den", "Sawatdi", "Merhaba", "–ü—Ä–∏–≤—ñ—Ç", "Paivaa", "Bonjour", "Namaste", "Zdravo", "Dobry den", "God dag", "Saluton", "Tervist", "Konnichi wa"]
    text = f"{random.choice(hi_s)}! –ë–æ–ª–µ–ª–∞ –ª–∏ –≥–æ–ª–æ–≤–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ(–∏–π) {missing_days} –¥–Ω—è/–¥–Ω–µ–π/–¥–µ–Ω—å?"
    await bot.send_message(
        user_id,
        text,
        reply_markup=kb.yes_no_missing
    )


@dp.message_handler()
async def handle_other(message: types.Message):
    """
    Handle messages depending on its context
    """
    if message.text == '–î–∞ :(':
        await add_paincase_entry(message)
    elif message.text == '–ù–µ—Ç, –≤—Å—ë —Ö–æ—Ä–æ—à–æ! / –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ':
        nice_words = ["–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ", "–í–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ", "–ß—É–¥–µ—Å–Ω–æ", "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ", "–ö—Ä—É—Ç–æ", "–ó–¥–æ—Ä–æ–≤–æ", "–î–∏–≤–Ω–æ", "–ß–æ—Ç–∫–æ",
                      "–ë–ª–∞–≥–æ–¥–∞—Ç—å", "–ü–æ—Ç—Ä—è—Å–∞—é—â–µ", "–ò–∑—É–º–∏—Ç–µ–ª—å–Ω–æ", "–†–æ—Å–∫–æ—à–Ω–æ", "–û—Ç–º–µ–Ω–Ω–æ", "–ë–µ—Å–ø–æ–¥–æ–±–Ω–æ", "–®–∏–∫–∞—Ä–Ω–æ",
                      "–†–∞—Å–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ", "–ü—Ä–µ–ª–µ—Å—Ç–Ω–æ", "–õ—é–±–æ-–¥–æ—Ä–æ–≥–æ", "–ü–æ—Ö–≤–∞–ª—å–Ω–æ", "–û–±–≤–æ—Ä–æ–∂–∏—Ç–µ–ª—å–Ω–æ", "–ë–∞–ª–¥—ë–∂", "–ö–∞–µ—Ñ",
                      "–ù–µ–ø–ª–æ—Ö–æ", "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ"]
        await message.reply(f'{random.choice(nice_words)}!', reply_markup=types.ReplyKeyboardRemove())
    elif message.text.lower().strip().startswith('—Å–ø–∞—Å'):
        await message.reply('–†–∞–¥ —Å—Ç–∞—Ä–∞—Ç—å—Å—è)', reply_markup=types.ReplyKeyboardRemove())
