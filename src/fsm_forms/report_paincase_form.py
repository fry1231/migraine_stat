from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup
from src.fsm_forms._custom import CustomState as State
from aiogram.types import ParseMode
import random
import pytz

from src.bot import dp, bot, _
from src.fsm_forms import _keyboards as kb
from src.config import logger
from db import sql
from db.redis.crud import remove_user_state
import datetime


class ReportPainCaseForm(StatesGroup):
    date = State()
    durability = State()
    intensity = State()
    aura = State()
    provocateurs = State()
    symptoms = State()
    was_medecine_taken = State()
    description = State()
    # owner_id

    # if medecine taken
    drugname = State()
    amount = State()
    # owner_id
    # paincase_id


@dp.callback_query_handler(lambda c: c.data and c.data == 'pain', state='*')
@dp.message_handler(commands=['pain'], state='*')
async def add_paincase_entry(message_or_query: types.Message | types.CallbackQuery, state: FSMContext = None):
    """Conversation entrypoint"""
    if state and await state.get_state():
        await state.finish()
    # NOTE list of frustration words. Used when user says he had a headache. Separate with '|'
    wtf_words = _('–ù—É –≤–æ—Ç.|–Å–º–∞—ë!|–¢—Ñ—É!|–û–≥–æ, –Ω–∞–¥–µ—é—Å—å, –Ω–µ —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ!|–¢—ã—Å—è—á–∞ —á–µ—Ä—Ç–µ–π!').split('|')
    wtf_words += ['üò±', 'üòî', 'üò¢', 'üòû', 'üò¶']
    user_id = message_or_query.from_user.id
    user = await sql.get_user(telegram_id=user_id)
    if not user:
        logger.error(f"User {user_id} not found in the database!")
    tz = user.timezone
    date_today = datetime.datetime.now(pytz.timezone(tz)).date()
    # if user.notify_every == 1:   # If everyday notification, skip the date question??
    #     await ReportPainCaseForm.durability.set()
    #     await message_or_query.reply(_("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∞—Å–∞—Ö (–º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å):"),
    #                                  reply_markup=kb.durability_kb([_('–í–µ—Å—å –¥–µ–Ω—å'), 2, 4, 6, 12, 16]))
    await ReportPainCaseForm.date.set()
    if isinstance(message_or_query, types.Message):
        await message_or_query.reply(_("–ö–æ–≥–¥–∞?"), reply_markup=kb.get_date_kb(date_today, 'pain'))
    else:
        await message_or_query.message.edit_text(
            random.choice(wtf_words) + ' ' + _("–ö–æ–≥–¥–∞?"),
            reply_markup=kb.get_date_kb(date_today, 'pain'),
            parse_mode=ParseMode.HTML)


@dp.callback_query_handler(state=ReportPainCaseForm.date)
async def process_datetime(callback_query: types.CallbackQuery, state: FSMContext):
    ddate = callback_query.data.split('_')[-1]
    async with state.proxy() as data:
        data['date'] = ddate
    await ReportPainCaseForm.durability.set()
    text = f'<b>{ddate}</b>\n' + _("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∞—Å–∞—Ö (–º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å):")
    await bot.send_message(callback_query.from_user.id, text,
                           reply_markup=kb.durability_kb([_('–í–µ—Å—å –¥–µ–Ω—å'), 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16]))
    try:
        await callback_query.message.delete()
    except Exception:
        pass


@dp.message_handler(lambda message: not message.text.isdigit() and message.text != _('–í–µ—Å—å –¥–µ–Ω—å'),
                    state=ReportPainCaseForm.durability)
async def process_durability_invalid(message: types.Message):
    """
    If amount is invalid
    """
    return await message.reply(_("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:"),
                               reply_markup=kb.durability_kb(
                                   [_('–í–µ—Å—å –¥–µ–Ω—å'), 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16]))


@dp.message_handler(lambda message: message.text.isdigit() or message.text == _('–í–µ—Å—å –¥–µ–Ω—å'),
                    state=ReportPainCaseForm.durability)
async def process_durability(message: types.Message, state: FSMContext):
    # Update state and data
    async with state.proxy() as data:
        if message.text.strip() == _('–í–µ—Å—å –¥–µ–Ω—å'):
            data['durability'] = 24
        else:
            durability = int(message.text.strip())
            durability = min(24*7, durability)
            durability = max(1, durability)
            data['durability'] = durability
    await ReportPainCaseForm.intensity.set()
    await message.reply(_("–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –æ—Ç 1 –¥–æ 10:"), reply_markup=kb.durability_kb())


@dp.message_handler(lambda message: not message.text.isdigit(), state=ReportPainCaseForm.intensity)
async def process_intensity_invalid(message: types.Message):
    """
    If amount is invalid
    """
    return await message.reply(_("–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:"), reply_markup=kb.durability_kb())


@dp.message_handler(lambda message: message.text.isdigit(), state=ReportPainCaseForm.intensity)
async def process_intensity(message: types.Message, state: FSMContext):
    # Update state and data
    intensity = int(message.text.strip())
    intensity = min(10, intensity)
    intensity = max(1, intensity)
    async with state.proxy() as data:
        data['intensity'] = intensity
    await ReportPainCaseForm.aura.set()
    await message.reply(_("–ë—ã–ª–∞ –ª–∏ –∞—É—Ä–∞?"), reply_markup=kb.yes_no_kb())


@dp.message_handler(lambda message: message.text not in [_("–î–∞"), _("–ù–µ—Ç")], state=ReportPainCaseForm.aura)
async def process_aura_invalid(message: types.Message):
    return await message.reply(_("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ: "), reply_markup=kb.yes_no_kb())


@dp.message_handler(state=ReportPainCaseForm.aura)
async def process_aura(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['aura'] = True if message.text == _("–î–∞") else False
    await ReportPainCaseForm.provocateurs.set()
    await message.reply(_("–í—ã–±–µ—Ä–∏ —Ç—Ä–∏–≥–≥–µ—Ä—ã –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏:"), reply_markup=kb.get_provocateurs_kb())


@dp.message_handler(state=ReportPainCaseForm.provocateurs)
async def process_provocateurs(message: types.Message, state: FSMContext):
    text = message.text.strip()
    async with state.proxy() as data:
        if text == _('–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å'):
            if 'provocateurs' not in data:
                data['provocateurs'] = None
            await ReportPainCaseForm.symptoms.set()
            await message.reply(_('–ë—ã–ª–∏ –ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Å–∏–º–ø—Ç–æ–º—ã?'),
                                reply_markup=kb.get_symptoms_kb())
        else:
            if 'provocateurs' not in data:
                data['provocateurs'] = text
            else:
                data['provocateurs'] += f', {text}'
            to_exclude = [el.strip() for el in data['provocateurs'].split(',')]
            await ReportPainCaseForm.provocateurs.set()
            await message.reply(_('–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ "—Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"'),
                                reply_markup=kb.get_provocateurs_kb(exclude=to_exclude))


@dp.message_handler(state=ReportPainCaseForm.symptoms)
async def process_symptoms(message: types.Message, state: FSMContext):
    text = message.text.strip()
    async with state.proxy() as data:
        if text == _('–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å'):
            if 'symptoms' not in data:
                data['symptoms'] = None
            await ReportPainCaseForm.was_medecine_taken.set()
            await message.reply(_('–ü—Ä–∏–Ω–∏–º–∞–ª–∏—Å—å –ª–∏ –ø–∏–ª—é–ª–∏?'),
                                reply_markup=kb.yes_no_kb())
        else:
            if 'symptoms' not in data:
                data['symptoms'] = text
            else:
                data['symptoms'] += f', {text}'
            to_exclude = [el.strip() for el in data['symptoms'].split(',')]
            await ReportPainCaseForm.symptoms.set()
            await message.reply(_('–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ "—Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"'),
                                reply_markup=kb.get_symptoms_kb(exclude=to_exclude))


@dp.message_handler(lambda message: message.text not in [_("–î–∞"), _("–ù–µ—Ç")], state=ReportPainCaseForm.was_medecine_taken)
async def process_was_medecine_taken_invalid(message: types.Message):
    return await message.reply(_("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ: "), reply_markup=kb.yes_no_kb())


@dp.message_handler(state=ReportPainCaseForm.was_medecine_taken)
async def process_was_medecine_taken(message: types.Message, state: FSMContext):
    if message.text == _("–ù–µ—Ç"):
        await ReportPainCaseForm.description.set()
        await message.reply(_("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è, –µ—Å–ª–∏ –∏–º–µ—é—Ç—Å—è:"), reply_markup=kb.add_description_kb())
    else:
        reply_markup = await kb.get_drugs_kb_and_drugnames(owner=message.from_user.id)
        reply_markup = reply_markup[0]
        await ReportPainCaseForm.drugname.set()
        await message.reply(_("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–µ—Ç–∫–∏:"),
                            reply_markup=reply_markup)


@dp.message_handler(lambda message: message.text.strip() == '', state=ReportPainCaseForm.drugname)
async def process_drugname_invalid(message: types.Message):
    reply_markup, __ = await kb.get_drugs_kb_and_drugnames(owner=message.from_user.id)
    return await message.reply(_("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ"),
                               reply_markup=reply_markup)


@dp.message_handler(state=ReportPainCaseForm.drugname)
async def process_drugname(message: types.Message, state: FSMContext):
    text = message.text.strip()
    async with state.proxy() as data:
        if text == _('–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å'):
            await ReportPainCaseForm.description.set()
            await message.reply(_("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è, –µ—Å–ª–∏ –∏–º–µ—é—Ç—Å—è:"), reply_markup=kb.add_description_kb())
        else:
            if 'drugname' not in data:
                data['drugname'] = [text]
            else:
                data['drugname'].append(text)
            await ReportPainCaseForm.amount.set()
            await message.reply(_("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–Ω—è—Ç–æ–≥–æ –≤ –º–≥? (–º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å)"), reply_markup=kb.drug_amount_kb)


@dp.message_handler(state=ReportPainCaseForm.amount)
async def process_amount(message: types.Message, state: FSMContext):
    # Update state and data
    amount = message.text.strip()
    async with state.proxy() as data:
        if 'amount' not in data:
            data['amount'] = [amount]
        else:
            data['amount'].append(amount)
    to_exclude = [el.strip() for el in data['drugname']]
    reply_markup, __ = await kb.get_drugs_kb_and_drugnames(owner=message.from_user.id, exclude=to_exclude, add_next=True)
    await ReportPainCaseForm.drugname.set()
    await message.reply(_('–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ "—Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"'),
                        reply_markup=reply_markup)


@dp.message_handler(state=ReportPainCaseForm.description)
async def process_description(message: types.Message, state: FSMContext):
    text = message.text.strip()
    async with state.proxy() as data:
        if text == _('–ù–µ –∏–º–µ—é—Ç—Å—è'):
            data['description'] = None
        else:
            data['description'] = text
        data['owner_id'] = message.from_user.id

        await sql.report_paincase(**data)
    text = _("–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    text += _('\n–ì–æ–ª–æ–≤–∞ –±–æ–ª–µ–ª–∞ <b>{pain_date}</b>\n'
              '–í —Ç–µ—á–µ–Ω–∏–µ <b>{durability} —á.</b>\n'
              '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: <b>{intensity}</b>\n'
              '<b>{aura_str}</b>\n'
              '–¢—Ä–∏–≥–≥–µ—Ä–æ–≤: <b>{n_provocateurs}</b>\n'
              '–°–∏–º–ø—Ç–æ–º–æ–≤: <b>{n_symptoms}</b>\n'
              '–¢–∞–±–ª–µ—Ç–∫–∏: <b>{drugs_or_not}</b>\n').format(
        pain_date=data['date'],
        durability=data['durability'],
        intensity=data['intensity'],
        aura_str=_('–ê—É—Ä–∞ –±—ã–ª–∞') if data['aura'] else _('–ê—É—Ä—ã –Ω–µ –±—ã–ª–æ'),
        n_provocateurs=len(data['provocateurs'].split(',')) if data['provocateurs'] else 0,
        n_symptoms=len(data['symptoms'].split(',')) if data['symptoms'] else 0,
        drugs_or_not=', '.join(data['drugname']) if 'drugname' in data else _('–Ω–µ –ø—Ä–∏–Ω–∏–º–∞–ª–∏')
    )
    await bot.send_message(message.chat.id, text, reply_markup=types.ReplyKeyboardRemove())
    # Finish conversation
    await state.finish()
    await remove_user_state(message.from_user.id)
