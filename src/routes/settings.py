from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, \
    ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
import pytz
from tzfpy import get_tzs
import datetime
import orjson

from db import crud
from db import crud
from db.models import User
from src.bot import dp, _, i18n
from src.config import logger
from src.misc.utils import change_user_language, local_to_utc, change_timezone_get_utc, \
    get_user_language, translate_country_name
import src.misc.keyboards as kb


# tz_dict = {
#     'Europe': {
#         'Ukraine': {
#             'timezones': [
#                 'Europe/Kiev',
#                 'Europe/Uzhgorod',
#                 .....
#                 ],
#             'code': 'UA'
#         },
#     },
# }
with open('src/misc/tz_dict.json') as f:
    tz_dict = orjson.loads(f.read())

code_by_country = {}
country_by_code = {}
for continent_ in tz_dict:
    for country_ in tz_dict[continent_]:
        code_by_country[country_] = tz_dict[continent_][country_]['code']
        country_by_code[tz_dict[continent_][country_]['code']] = country_


## Settings
### language (current = ru)
#   | - back
#   | - ru uk en fr es

### timezone (current = Europe/Paris)
#   | - back

### notification time (current = 14:00)
#   | - back
#   | - a.m.
#     | - 0 1 2 3 4 5 6 7 8 9 10 11
#   | - p.m.
#     | - 12 13 14 15 16 17 18 19 20 21 22 23

### notification frequency (current = 1 day)
#   | - back
#   | - 1 day
#   | - 2 days
#   | - 3 days
#   | - 1 week


# ==================================================
# Main menu
@dp.callback_query_handler(lambda c: c.data and c.data == 'back_to_settings', state='*')
@dp.message_handler(commands=['settings'], state='*')
async def change_settings(message_or_query: types.Message | types.CallbackQuery, state: FSMContext = None):
    if state and await state.get_state():
        await state.finish()
    await i18n.trigger(action='pre_process_callback_query',
                       args=(message_or_query, None))  # kostyl, otherwise does not change language immediately
    keyboard = InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.row(InlineKeyboardButton(_('–Ø–∑—ã–∫ üá∑üá∫üá∫üá¶üá¨üáßüá´üá∑üá™üá∏'), callback_data='change_lang'))
    keyboard.row(InlineKeyboardButton(_('–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å'), callback_data='change_timezone'))
    keyboard.row(InlineKeyboardButton(_('–í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π'), callback_data='change_notif_time'))
    keyboard.row(InlineKeyboardButton(_('–ß–∞—Å—Ç–æ—Ç–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π'), callback_data='change_notif_freq'))

    user: User = await crud.get_user(telegram_id=message_or_query.from_user.id)
    language: str = user.language
    tz_str = user.timezone
    tz = pytz.timezone(tz_str)
    # tz in "UTC+03:00" format
    utc_offset_str = datetime.datetime.now(tz).strftime('%z')
    utc_offset_str = f'UTC{utc_offset_str[:3]}:{utc_offset_str[3:]}'
    utc_notify_at: datetime.time = user.utc_notify_at
    local_notify_at = datetime.datetime.combine(datetime.date.today(), utc_notify_at).astimezone(tz)
    notification_time = local_notify_at.strftime('%H:%M')
    notification_period = user.notify_every
    notification_period_mapper = {
        -1: _('–æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã'),
        1: _('–µ–∂–µ–¥–Ω–µ–≤–Ω–æ'),
        2: _('—á–µ—Ä–µ–∑ –¥–µ–Ω—å'),
        3: _('1 —Ä–∞–∑ –≤ 3 –¥–Ω—è'),
        7: _('–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ'),
    }
    language_with_flag = {
        'ru': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
        'uk': 'üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
        'en': 'üá¨üáß English',
        'fr': 'üá´üá∑ Fran√ßais',
        'es': 'üá™üá∏ Espa√±ol'
    }
    text = _('–¢–µ–∫—É—â–∏–π —è–∑—ã–∫: <b>{language}</b>\n'
             '–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <b>{timezone} {utc_offset_formatted}</b>\n'
             '–í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π: <b>{notification_time}</b>\n'
             '–ß–∞—Å—Ç–æ—Ç–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π: <b>{notification_period}</b>') \
        .format(language=language_with_flag[language],
                timezone=tz_str,
                utc_offset_formatted=utc_offset_str,
                notification_time=notification_time,
                notification_period=notification_period_mapper[notification_period])

    if isinstance(message_or_query, types.Message):
        message: types.Message = message_or_query
        await message.reply(text, reply_markup=keyboard)
    else:
        query: types.CallbackQuery = message_or_query
        await query.message.edit_text(text, reply_markup=keyboard)


# ==================================================
# Language (current = ru)
#   | - back
#   | - ru ua en fr es
@dp.callback_query_handler(lambda c: c.data and c.data == 'change_lang')
async def change_lang(callback_query: types.CallbackQuery):
    def kb_change_lang():
        keyboard = InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.insert(InlineKeyboardButton(_('<< –ù–∞–∑–∞–¥'), callback_data=f'back_to_settings'))
        keyboard.insert(InlineKeyboardButton('üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data='change_lang_ru'))
        keyboard.insert(InlineKeyboardButton('üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', callback_data='change_lang_uk'))
        keyboard.insert(InlineKeyboardButton('üá¨üáß English', callback_data='change_lang_en'))
        keyboard.insert(InlineKeyboardButton('üá´üá∑ Fran√ßais', callback_data='change_lang_fr'))
        keyboard.insert(InlineKeyboardButton('üá™üá∏ Espa√±ol', callback_data='change_lang_es'))
        return keyboard
    await callback_query.message.edit_text(_('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:'), reply_markup=kb_change_lang())


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('change_lang_'))
async def change_lang_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    language = callback_query.data.split('_')[-1]
    await crud.change_user_props(telegram_id=user_id, language=language)
    await change_user_language(user_id, language)
    await change_settings(callback_query)


# ==================================================
# Timezone (current = Europe/Paris)
#  | - back
#  | - share geolocation
#    | - share geolocation üìç
#      | - choose from several or confirmation
#  | - choose from list
#    | - list of continents
#      | - list of countries
#        | - list of timezones
#  | - enter manually
#    | - entering manually
#      | - list of timezones

def kb_change_timezone():
    keyboard = InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.row(InlineKeyboardButton(_('<< –ù–∞–∑–∞–¥'), callback_data='back_to_settings'))
    keyboard.row(InlineKeyboardButton(_('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π'), callback_data='change_timezone_geolocation'))
    keyboard.row(InlineKeyboardButton(_('–í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞'), callback_data='change_timezone_list'))
    # keyboard.insert(InlineKeyboardButton(_('–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é'), callback_data='change_timezone_manual'))
    return keyboard


@dp.callback_query_handler(lambda c: c.data and c.data == 'change_timezone')
async def change_timezone(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(_('–°–ø–æ—Å–æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞:'),
                                           reply_markup=kb_change_timezone())


# ======= Geolocation
@dp.callback_query_handler(lambda c: c.data and c.data == 'change_timezone_geolocation')
async def change_timezone_geolocation(callback_query: types.CallbackQuery):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.row(KeyboardButton(_('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π üìç'), request_location=True))
    await callback_query.message.reply(_('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π üìç'), reply_markup=keyboard)


@dp.message_handler(content_types=['location'])
async def change_timezone_geolocation_callback(message: types.Message):
    user_id = message.from_user.id
    user: User = await crud.get_user(telegram_id=user_id)
    tz_list: list[str] = get_tzs(message.location.longitude, message.location.latitude)
    await crud.change_user_props(telegram_id=user_id,
                                          latitude=message.location.latitude, longitude=message.location.longitude)
    if len(tz_list) == 0:
        await message.reply(_('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±'),
                            reply_markup=kb_change_timezone())
        logger.error(f'Could not get timezone from geolocation for user {user_id} '
                     f'(lat: {message.location.latitude},'
                     f' lon: {message.location.longitude})')
    elif len(tz_list) == 1:
        new_tz = tz_list[0]
        old_tz = user.timezone
        old_utc_time = user.utc_notify_at
        new_utc_time = change_timezone_get_utc(old_utc_time, old_tz, new_tz)
        await crud.change_user_props(telegram_id=user_id, timezone=new_tz, utc_notify_at=new_utc_time)
        await change_settings(message)
    elif len(tz_list) > 1:
        keyboard = InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for tz in tz_list[:10]:
            tz_str = f"{tz} (UTC{datetime.datetime.now(pytz.timezone(tz)).strftime('%z')})"
            keyboard.row(InlineKeyboardButton(tz_str, callback_data=f'ch_tz_to_{tz}'))
        # NOTE all suggested timezones are wrong
        keyboard.row(InlineKeyboardButton(_('–ù–µ—Ç –Ω—É–∂–Ω–æ–≥–æ'), callback_data=f'change_timezone'))
        await message.reply(_('–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π:'),
                            reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('ch_tz_to_'))
async def change_timezone_geolocation_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    new_tz = callback_query.data.split('_', maxsplit=4)[-1]
    user: User = await crud.get_user(telegram_id=user_id)
    old_tz = user.timezone
    old_utc_time = user.utc_notify_at
    new_utc_time = change_timezone_get_utc(old_utc_time, old_tz, new_tz)
    await crud.change_user_props(telegram_id=user_id, timezone=new_tz, utc_notify_at=new_utc_time)
    await change_settings(callback_query)


# ======= Choose in list
@dp.callback_query_handler(lambda c: c.data and c.data == 'change_timezone_list')
async def change_timezone_list(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.row(InlineKeyboardButton(_('<< –ù–∞–∑–∞–¥'), callback_data=f'change_timezone'))
    keyboard.row(InlineKeyboardButton(_('–ï–≤—Ä–æ–ø–∞'), callback_data=f'change_tz_cont_europe'))
    keyboard.row(InlineKeyboardButton(_('–ê–∑–∏—è'), callback_data=f'change_tz_cont_asia'))
    keyboard.row(InlineKeyboardButton(_('–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞'), callback_data=f'change_tz_cont_north-america'))
    keyboard.row(InlineKeyboardButton(_('–Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞'), callback_data=f'change_tz_cont_south-america'))
    keyboard.row(InlineKeyboardButton(_('–ê—Ñ—Ä–∏–∫–∞'), callback_data=f'change_tz_cont_africa'))
    keyboard.row(InlineKeyboardButton(_('–û–∫–µ–∞–Ω–∏—è'), callback_data=f'change_tz_cont_oceania'))

    await callback_query.message.edit_text(_('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç:'),
                                           reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data
                                     and c.data.startswith('change_tz_cont_')
                                     and 'country' not in c.data)
async def change_timezone_list_continent(callback_query: types.CallbackQuery):
    c_data = callback_query.data
    continent = c_data.split('_')[3]
    user_language = await get_user_language(callback_query.from_user.id)
    page = 0
    try:
        page = int(c_data.split('_')[-1])
    except ValueError:
        pass
    countries = list(tz_dict[continent].keys())
    country_codes = [code_by_country[country] for country in countries]
    translations = {code: translate_country_name(code, user_language) for code in country_codes}
    sorted_codes = sorted(country_codes, key=lambda x: translations[x])

    translated_countries = [translations[code] for code in sorted_codes]
    countries = [country_by_code[code] for code in sorted_codes]
    # ^ translated_countries now aligned with countries

    translated_slice = translated_countries[page * 10: (page + 1) * 10]
    countries_rows = ''
    for i, country in enumerate(translated_slice):
        countries_rows += f'\n{i + 1}. {country}'

    callback_data_func = lambda country: f'ch_tz_cont_{continent}_country_{code_by_country[country]}'
    await callback_query.message.edit_text(
        _('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:{countries_rows}').format(countries_rows=countries_rows)
        , reply_markup=kb.ten_things(list_of_el=countries,
                                     back_callback='back_to_settings',
                                     navigation_callback=f'change_tz_cont_{continent}',
                                     callback_data_func=callback_data_func,
                                     page=page))


# ch_tz_cont_{continent}_country_{country}_{page:optional}
@dp.callback_query_handler(lambda c: c.data
                                     and c.data.startswith('ch_tz_cont_')
                                     and 'country' in c.data)
async def change_timezone_list_country(callback_query: types.CallbackQuery):
    country_code = callback_query.data.split('_')[5]
    country = country_by_code[country_code]
    continent = callback_query.data.split('_')[3]
    tzs = tz_dict[continent][country]['timezones']
    page = 0
    try:
        page = int(callback_query.data.split('_')[-1])
    except ValueError:
        pass
    tzs_slice = tzs[page * 10: (page + 1) * 10]
    tzs_rows = ''
    for i, tz in enumerate(tzs_slice):
        utc_offset_str = datetime.datetime.now(pytz.timezone(tz)).strftime('%z')
        utc_offset_str = f'UTC{utc_offset_str[:3]}:{utc_offset_str[3:]}'
        tzs_rows += f'\n{i + 1:<3} `{tz:^30}` {utc_offset_str}'
    await callback_query.message.edit_text(
        _('–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:\n{tzs_rows}').format(tzs_rows=tzs_rows)
        , reply_markup=kb.ten_things(list_of_el=tzs,
                                     back_callback=f'change_tz_cont_{continent}',
                                     navigation_callback=f'ch_tz_cont_{continent}_country_{country_code}',
                                     callback_data_func=lambda tz: f'ch_tz_to_{tz}',
                                     page=page)
        , parse_mode='Markdown')


# ======= Enter manually
# @dp.callback_query_handler(lambda c: c.data and c.data == 'change_timezone_manual')
# async def change_timezone_manual(callback_query: types.CallbackQuery):
#     await callback_query.message.reply(_('–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç UTC –≤ —Ñ–æ—Ä–º–∞—Ç–µ +hhmm'
#                                          '(–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤–≤–µ–¥–∏—Ç–µ +0300)'))


# ==================================================
# Notification time (current = 14:00)
#   | - back
#   | - a.m.
#     | - 1 2 3 4 5 6 7 8 9 10 11 0
#   | - p.m.
#     | - 13 14 15 16 17 18 19 20 21 22 23 24
@dp.callback_query_handler(lambda c: c.data and c.data == 'change_notif_time')
async def change_notif_time(callback_query: types.CallbackQuery):
    """
    Change utc_notify_at attr in User instance
    """
    keyboard = InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.row(InlineKeyboardButton(_('<< –ù–∞–∑–∞–¥'), callback_data=f'back_to_settings'))
    keyboard.row(InlineKeyboardButton(_('–¥–æ –ø–æ–ª—É–¥–Ω—è'), callback_data='change_notif_time_am'))
    keyboard.row(InlineKeyboardButton(_('–ø–æ—Å–ª–µ –ø–æ–ª—É–¥–Ω—è'), callback_data='change_notif_time_pm'))

    user_id = callback_query.from_user.id
    user: User = await crud.get_user(telegram_id=user_id)
    utc_notify_at: datetime.time = user.utc_notify_at
    tz = pytz.timezone(user.timezone)
    local_notify_at: str = datetime.datetime.combine(datetime.date.today(), utc_notify_at)\
                                                                              .astimezone(tz) \
                                                                              .strftime('%H:%M')
    text = _("–ë–æ—Ç –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –±—É–¥–µ—Ç —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å, –±–æ–ª–µ–ª–∞ –ª–∏ –≥–æ–ª–æ–≤–∞.\n"
             "–ö–æ–≥–¥–∞ –ª—É—á—à–µ –æ–± —ç—Ç–æ–º —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å?\n"
             "<b>(–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π - {local_notify_at})</b>").format(local_notify_at=local_notify_at)
    await callback_query.message.edit_text(text, reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('change_notif_time_'))
async def change_notif_hour(callback_query: types.CallbackQuery):
    def kb_change_notif_hour(callback_str: str):
        keyboard = InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.row(InlineKeyboardButton(_('<< –ù–∞–∑–∞–¥'), callback_data=f'change_notif_time'))
        add = 0
        if callback_str.endswith('pm'):
            add = 12
        buttons = []
        for i in range(1, 13):
            i += add
            if i == 12:
                buttons.append(InlineKeyboardButton(_('12 (–ø–æ–ª–¥–µ–Ω—å)'), callback_data=f'change_notif_hour_12'))
            elif i == 24:
                buttons.append(InlineKeyboardButton(_('12 (–ø–æ–ª–Ω–æ—á—å)'), callback_data=f'change_notif_hour_0'))
            else:
                buttons.append(InlineKeyboardButton(str(i), callback_data=f'change_notif_hour_{i}'))
        for i in range(4):
            keyboard.row(*buttons[i * 3: (i + 1) * 3])
        return keyboard

    await callback_query.message.edit_text(_('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:'),
                                           reply_markup=kb_change_notif_hour(callback_query.data))


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('change_notif_hour_'))
async def change_notif_hour_callback(callback_query: types.CallbackQuery):
    """

    """
    hour = int(callback_query.data.split('_')[-1])
    user_id = callback_query.from_user.id
    user: User = await crud.get_user(telegram_id=user_id)
    local_notify_at: datetime.time = datetime.time(hour, 0)
    utc_notify_at = local_to_utc(local_notify_at, user.timezone)
    await crud.change_user_props(telegram_id=user_id, utc_notify_at=utc_notify_at)
    await change_settings(callback_query)


# ==================================================
# Notification frequency (current = 1 day)
#   | - back
#   | - 1 day
#   | - 2 days
#   | - 3 days
#   | - 1 week
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('change_notif_freq'))
async def reschedule(callback_query: types.CallbackQuery):
    """
    Change notify_every attr in User instance
    """
    user_id = callback_query.from_user.id
    user: User = await crud.get_user(telegram_id=user_id)
    notification_period = user.notify_every
    period_text = str(notification_period)
    temp = {
        '1': _(' –¥–µ–Ω—å'),
        '2': _(' –¥–Ω—è'),
        '3': _(' –¥–Ω—è'),
        '7': _(' –¥–Ω–µ–π'),
        '31': _(' –¥–µ–Ω—å')
    }
    if notification_period == -1:
        text_notif_period = _("–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω")
    else:
        period_text += temp[period_text]
        text_notif_period = _("–¢–µ–∫—É—â–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è - 1 —Ä–∞–∑ –≤ {period_text}").format(period_text=period_text)
    text = _("–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –æ–ø—Ä–æ—Å–∞ (—Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è 1 —Ä–∞–∑ –≤ ...)\n{text_notif_period}").format(
        text_notif_period=text_notif_period)
    await callback_query.message.edit_text(text, reply_markup=kb.period_days('schedule', include_month=False))


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('schedule'))
async def reschedule_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    n_days = int(callback_query.data.split('_')[-1])
    await crud.change_user_props(telegram_id=user_id, notify_every=n_days)
    await change_settings(callback_query)
