import random
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import exceptions

from db import sql
from db.models import User
from src.bot import dp, bot, _


@dp.message_handler(commands=['start', 'help'], state='*')
async def send_welcome(message: types.Message, state: FSMContext = None):
    """
    Check if user exists. If not: greet and create new user.
    Save notification about new user in Redis
    """
    if state and await state.get_state():
        await state.finish()
    user_id = message.from_user.id
    # Reject messages from bots
    if message.from_user.is_bot:
        return
    # Get current user, if not exists - add to the DB
    user = await sql.get_user(telegram_id=user_id)
    if not user:
        # User info
        first_name = message.from_user.first_name
        user_name = message.from_user.username
        locale = message.from_user.locale
        language = locale.language
        if language not in ['ru', 'uk', 'en', 'fr', 'es']:
            language = 'en'
        # Add user to the DB
        await sql.create_user(
            telegram_id=user_id,
            first_name=first_name,
            user_name=user_name,
            language=language
        )
    text = \
        _("""–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–∏–∫–∞ –≥–æ–ª–æ–≤–Ω—ã—Ö –±–æ–ª–µ–π, –ø—Ä–∏—ë–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤ –∏ –¥–∞–≤–ª–µ–Ω–∏—è.
    –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:
üîò /pain - —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å –±–æ-–±–æ
üîò /druguse - —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å –ø—Ä–∏—ë–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
üîò /pressure - –∑–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ—ë –¥–∞–≤–ª–µ–Ω–∏–µ
üîò /medications - –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ
üîò /calendar - –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
üîò /statistics - –≤—ã–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ–ª–µ–π –∏–ª–∏ –ø—Ä–∏—ë–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤
üîò /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π""")
    await message.reply(text)


async def regular_report(user_instance: User, missing_days: int):
    """
    Ask each user if there was pain during the days
    If so - start report_paincase_form
    """
    hi_s = ["–°–∞–ª–∞–º –∞–ª–µ–π–∫—É–º", "Hi", "Hello", "Ahlan wa sahlan", "Marhaba", "Hola", "–ü—Ä—ã–≤i—Ç–∞–Ω–Ω–µ", "–ó–¥—Ä–∞–≤–µ–π—Ç–µ", "Jo napot",
            "Chao", "Aloha", "Hallo", "Geia sou", "Gamarjoba", "Shalom", "Selamat", "Godan daginn", "¬°Buenos d√≠as",
            "Buon giorno", "Ave", "Lab dien", "Sveiki", "Sveikas", "Guten Tag", "Goddag", "Dzien dobry", "Ola", "Buna",
            "–ó–¥—Ä–∞–≤–æ", "Dobry den", "Sawatdi", "Merhaba", "–ü—Ä–∏–≤—ñ—Ç", "Paivaa", "Bonjour", "Namaste", "Zdravo",
            "Dobry den", "God dag", "Saluton", "Tervist", "Konnichi wa"]
    language = user_instance.language
    temp = {
        # NOTE 1
        '1': _('–¥–µ–Ω—å', locale=language),
        # NOTE 2
        '2': _('–¥–Ω—è', locale=language),
        # NOTE 3
        '3': _('–¥–Ω—è', locale=language),
        # NOTE 7
        '7': _('–¥–Ω–µ–π', locale=language),
        # NOTE 31
        '31': _('–¥–µ–Ω—å', locale=language)
    }
    if str(missing_days) in temp:
        suffix = temp[str(missing_days)]
    else:
        suffix = '–¥–Ω–µ–π'
    if missing_days == 1:
        text = _("{greetings}! –ë–æ–ª–µ–ª–∞ –ª–∏ —Å–µ–≥–æ–¥–Ω—è –≥–æ–ª–æ–≤–∞?", locale=language).format(
            greetings=random.choice(hi_s)
        )
    else:
        text = _("{greetings}! "
                 "–ë–æ–ª–µ–ª–∞ –ª–∏ –≥–æ–ª–æ–≤–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {missing_days} {suffix}?", locale=language).format(
            greetings=random.choice(hi_s),
            missing_days=missing_days,
            suffix=suffix
        )
    keyboard = InlineKeyboardMarkup()
    keyboard.insert(InlineKeyboardButton(_('–î–∞ :(', locale=language), callback_data='pain'))
    keyboard.insert(
        InlineKeyboardButton(_('–ù–µ—Ç, –≤—Å—ë —Ö–æ—Ä–æ—à–æ! / –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ', locale=language), callback_data='nopain'))
    await bot.send_message(
        user_instance.telegram_id,
        text,
        reply_markup=keyboard
    )


@dp.callback_query_handler(lambda c: c.data and c.data == 'nopain', state='*')
async def process_no_pain(callback_query: types.CallbackQuery, state: FSMContext):
    # NOTE Give some nice words to user if the user did not have a headache. Separate by comma + space
    nice_words_str = _("–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –í–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ, –ß—É–¥–µ—Å–Ω–æ, –í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ, –ö—Ä—É—Ç–æ, –ó–¥–æ—Ä–æ–≤–æ, –î–∏–≤–Ω–æ, –ß–æ—Ç–∫–æ, –ë–ª–∞–≥–æ–¥–∞—Ç—å, "
                       "–ü–æ—Ç—Ä—è—Å–∞—é—â–µ, –ò–∑—É–º–∏—Ç–µ–ª—å–Ω–æ, –†–æ—Å–∫–æ—à–Ω–æ, –û—Ç–º–µ–Ω–Ω–æ, –ë–µ—Å–ø–æ–¥–æ–±–Ω–æ, –®–∏–∫–∞—Ä–Ω–æ, –†–∞—Å–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ, –ü—Ä–µ–ª–µ—Å—Ç–Ω–æ, "
                       "–õ—é–±–æ-–¥–æ—Ä–æ–≥–æ, –ü–æ—Ö–≤–∞–ª—å–Ω–æ, –û–±–≤–æ—Ä–æ–∂–∏—Ç–µ–ª—å–Ω–æ, –ë–∞–ª–¥—ë–∂, –ö–∞–π—Ñ, –ù–µ–ø–ª–æ—Ö–æ, –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ")
    nice_words = nice_words_str.split(', ')
    text = callback_query.message.text
    text += '\n\n<b>'
    text += _('–ù–µ—Ç, –≤—Å—ë —Ö–æ—Ä–æ—à–æ! / –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
    text += '</b>'
    try:
        await callback_query.message.edit_text(text=text)
    except exceptions.MessageNotModified:
        pass
    await callback_query.message.reply(f'{random.choice(nice_words)}!', reply_markup=types.ReplyKeyboardRemove())

# For c.data == 'pain' handler in fsm_forms/report_paincase_form.py
